services:
  # Spring Boot Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: service-station-app
    ports:
      - "8081:8081" # Opening port 8081 to access the application
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/service_station_test
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=bratan06031975
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA=DEBUG
      - LOGGING_LEVEL_ORG_APACHE_KAFKA=DEBUG
    depends_on:
      - db
      - kafka
    networks:
      - app-network

  # PostgreSQL Service
  db:
    image: postgres:17
    container_name: service-station-db
    environment:
      POSTGRES_DB: service_station_test
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: bratan06031975
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Kafka Service (with Zookeeper)
  kafka:
    image: apache/kafka:3.9.1 # confluentinc/cp-kafka:7.5.0
    container_name: service-station-kafka
    ports:
      - "9092:9092" # Port for Kafka clients
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - app-network

  # Zookeeper Service
  zookeeper:
    image: zookeeper:3.9.1
    container_name: service-station-zookeeper
    ports:
      - "2181:2181" # Port for Zookeeper clients
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

networks:
  app-network:
    driver: bridge